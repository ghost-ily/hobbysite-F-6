from django.shortcuts import get_object_or_404, redirect
from django.views.generic import ListView, DetailView, CreateView, UpdateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.utils import timezone
from django.db.models import Count, Q, Sum, Case, When, Value, IntegerField
from django.urls import reverse_lazy
from .models import Commission, Job, JobApplication
from user_management.models import Profile
from .forms import CommissionForm, JobApplicationForm
from user_management.models import Profile 

class CommissionDetailView(DetailView):
    model = Commission
    template_name = "commissions/commission_detail.html"
    context_object_name = "commission"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        commission = self.object

        jobs = commission.jobs.all()
        total_required = sum(job.manpower_required for job in jobs)
        total_open = 0

        accepted_counts = {}
        for job in jobs:
            accepted = job.applications.filter(status='Accepted').count()
            accepted_counts[job.pk] = accepted
            total_open += max(job.manpower_required - accepted, 0)

        context.update({
            "total_required": total_required,
            "total_open": total_open,
            "accepted_counts": accepted_counts,
        })
        return context

        
class CommissionDetailView(DetailView):
    model = Commission
    template_name = 'commissions/commission_detail.html'
    context_object_name = 'commission'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        commission = self.get_object()

        jobs = Job.objects.filter(commission=commission).order_by(
            Case(
                When(status='Open', then=Value(0)),
                When(status='Full', then=Value(1)),
                default=Value(2),
                output_field=IntegerField(),
            ),
            '-manpower_required',
            'role'
        )

        context['jobs'] = jobs

        total_manpower = jobs.aggregate(Sum('manpower_required'))['manpower_required__sum'] or 0
        context['total_manpower'] = total_manpower

        accepted_counts = JobApplication.objects.filter(
            job__in=jobs, status='Accepted'
        ).values('job').annotate(count=Count('id'))

        job_application_counts = {job.id: 0 for job in jobs}
        for item in accepted_counts:
            job_application_counts[item['job']] = item['count']
        context['job_application_counts'] = job_application_counts

        context['open_manpower'] = total_manpower - sum(job_application_counts.values())

        if self.request.user.is_authenticated:
            context['form'] = JobApplicationForm()

        return context

class CommissionCreateView(LoginRequiredMixin, CreateView):
    model = Commission
    form_class = CommissionForm
    template_name = 'commissions/commission_form.html'

    def form_valid(self, form):
        profile = get_object_or_404(Profile, user=self.request.user)
        form.instance.author = profile
        form.instance.created_on = timezone.now()
        form.instance.updated_on = timezone.now()
        return super().form_valid(form)

    def get_success_url(self):
        return self.object.get_absolute_url()

class CommissionUpdateView(LoginRequiredMixin, UpdateView):
    model = Commission
    form_class = CommissionForm
    template_name = 'commissions/commission_form.html'

    def form_valid(self, form):
        form.instance.updated_on = timezone.now()
        response = super().form_valid(form)

        # If all jobs in the commission are Full, set commission status to Full
        jobs = Job.objects.filter(commission=self.object)
        if jobs.exists() and all(job.status == 'Full' for job in jobs):
            self.object.status = 'Full'
            self.object.save()

        return response

    def get_success_url(self):
        return self.object.get_absolute_url()