from django.db import models
from django.db.models import Q
from user_management.models import Profile
from django.urls import reverse


class Commission(models.Model):
    STATUS_CHOICES = [
        ('Open', 'Open'),
        ('Full', 'Full'),
        ('Completed', 'Completed'),
        ('Discontinued', 'Discontinued'),
    ]

    title = models.CharField(max_length=255)
    author = models.ForeignKey(Profile, on_delete=models.CASCADE)
    description = models.TextField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Open')
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['created_on']  # Basic ordering. View should apply status-based sorting.

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('commissions:commission_detail', args=[self.pk])

    def update_status_if_full(self):
        """Automatically set commission status to 'Full' if all jobs are full."""
        if self.jobs.exists() and all(job.status == 'Full' for job in self.jobs.all()):
            self.status = 'Full'
            self.save()

    def total_manpower_required(self):
        return sum(job.manpower_required for job in self.jobs.all())

    def total_open_manpower(self):
        open_count = 0
        for job in self.jobs.all():
            accepted = job.applications.filter(status='Accepted').count()
            open_count += max(0, job.manpower_required - accepted)
        return open_count


class Job(models.Model):
    STATUS_CHOICES = [
        ('Open', 'Open'),
        ('Full', 'Full'),
    ]

    commission = models.ForeignKey(Commission, on_delete=models.CASCADE, related_name='jobs')
    role = models.CharField(max_length=255)
    manpower_required = models.PositiveIntegerField()
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='Open')

    class Meta:
        # Basic ordering fallback, but proper sorting by annotated field in views is preferred
        ordering = ['role']

    def __str__(self):
        return f"{self.role} ({self.status}) for {self.commission.title}"

    def accepted_applications_count(self):
        return self.applications.filter(status='Accepted').count()

    def is_full(self):
        return self.accepted_applications_count() >= self.manpower_required


class JobApplication(models.Model):
    STATUS_CHOICES = [
        ('Pending', 'Pending'),
        ('Accepted', 'Accepted'),
        ('Rejected', 'Rejected'),
    ]

    job = models.ForeignKey(Job, on_delete=models.CASCADE, related_name='applications')
    applicant = models.ForeignKey(Profile, on_delete=models.CASCADE)
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='Pending')
    applied_on = models.DateTimeField(auto_now_add=True)

    class Meta:
        # Prevent duplicate applications
        unique_together = ('job', 'applicant')
        ordering = ['-applied_on']  # View should use custom annotated ordering for status

    def __str__(self):
        return f"{self.applicant.display_name} - {self.job.role} ({self.status})"
